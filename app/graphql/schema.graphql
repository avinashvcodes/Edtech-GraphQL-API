enum Role {
  STUDENT
  TEACHER
  ADMIN
}

type User {
  id: ID!
  name: String!
  email: String!
  role: Role!
  created_at: String!
  courses: [Course!]!
  enrollments: [Enrollment!]!
}

type Course {
  id: ID!
  title: String!
  description: String
  teacher: User!
  students: [User!]!
  sections: [Section!]!
  created_at: String
}

type Section {
  id: ID!
  title: String!
  order_index: Int!
  lessons: [Lesson!]!
  created_at: String
}

type Lesson {
  id: ID!
  title: String!
  content: String!
  order_index: Int!
  created_at: String
}

type Enrollment {
  id: ID!
  student: User!
  course: Course!
  enrolled_at: String!
}

type Progress {
  id: ID!
  student: User!
  lesson: Lesson!
  completed: Boolean
  completed_at: String
}

# ------------------ QUERIES ------------------
type Query {
  coursesByTeacher(teacherId: ID!): [Course!]!
  courseById(id: ID!): Course
  sectionsByCourse(courseId: ID!): [Section!]!
  lessonsBySection(sectionId: ID!): [Lesson!]!
  enrollmentsByStudent(studentId: ID!): [Enrollment!]!
  progressByStudent(studentId: ID!): [Progress!]!
}

# ------------------ INPUTS ------------------
input CreateCourseInput {
  title: String!
  description: String
  teacherId: ID!
}

input CreateUserInput {
  name: String!
  email: String!
  role: Role!
}

input EnrollStudentInput {
  studentId: ID!
  courseId: ID!
}

input MarkLessonCompleteInput {
  studentId: ID!
  lessonId: ID!
  completed: Boolean!
}

# ------------------ MUTATIONS ------------------
type Mutation {
  createCourse(course: CreateCourseInput!): Course!
  createUser(user: CreateUserInput!): User!
  enrollStudent(input: EnrollStudentInput!): Enrollment!
  markLessonComplete(input: MarkLessonCompleteInput!): Progress!
}
